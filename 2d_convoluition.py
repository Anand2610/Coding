# -*- coding: utf-8 -*-
"""2D_Convoluition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B1Dpj0Bx5oiZiBK-QCjmd1tJFMc2BGBC

**2-Dimensional Convolution of Matrices without inbuilt convolution function**
"""

import numpy as np
from scipy import linalg

#x[m,n]
X=np.array([[1,2,3],[4,5,6],[7,8,9]])
#h[m,n]
H=np.array([[1,1],[1,1],[1,1]])
print("\nx[m,n] is \n",X)
print("Order of x[m,n] = ",X.shape)
print("\nh[m,n] is \n",H)
print("Order of h[m,n] = ",H.shape)
X_row_num, X_col_num=X.shape
H_row_num, H_col_num=H.shape
Y_row_num=X_row_num + H_row_num-1
Y_col_num=X_col_num + H_col_num-1
Y_order= Y_row_num, Y_col_num
print("Order of Output Matrix, y[m,n] = ",Y_order)
#Number of block matrices
x=0
N_BM=x
for x in range(100):
  if x==X_row_num:
    print("\nNumber of block matrices = ",x) 
#zeros to be appended in H0, H1 and H2
NZA_BM=H_col_num-1
print("\nNumber of zeros to be appended in H0, H1 and H2 =",NZA_BM)
h0 = np.arange(1, 4)
append = np.zeros(h0.shape[0] - 2)
first_col = np.r_[h0, append]
first_row = np.r_[h0[0], append]
H0 = linalg.toeplitz(first_col, first_row)
h1= np.arange(4, 7)
append = np.zeros(h1.shape[0] - 2)
first_col = np.r_[h1, append]
first_row = np.r_[h1[0], append]
H1 = linalg.toeplitz(first_col, first_row)
h2= np.arange(7, 10)
append = np.zeros(h2.shape[0] - 2)
first_col = np.r_[h2, append]
first_row = np.r_[h2[0], append]
H2 = linalg.toeplitz(first_col, first_row)
print("\nH0 is\n",H0, "\n\nH1 is\n",H1, "\n\nH2 is\n",H2)
#Toeplitz Matrix Formation(A)
#Number of zeros to be appended in A 
NZA_A=H_row_num-1
print("\nNumber of zeros to be appended in Toeplitz Matrix, A =",NZA_A)
print("\nToeplitz Matrix A is \n")
j=np.zeros((4,2))
k=np.concatenate((H0,H1,H2,j,j))
l=np.concatenate((j,H0,H1,H2,j))
m=np.concatenate((j,j,H0,H1,H2))
#Making A matrix
a1=np.append(k[0],l[0])
A1_1=np.append(a1,m[0])
a2=np.append(k[1],l[1])
A1_2=np.append(a2,m[1])
a3=np.append(k[2],l[2])
A1_3=np.append(a3,m[2])
a4=np.append(k[3],l[3])
A1_4=np.append(a4,m[3])
a5=np.append(k[4],l[4])
A1_5=np.append(a5,m[4])
a6=np.append(k[5],l[5])
A1_6=np.append(a6,m[5])
a7=np.append(k[6],l[6])
A1_7=np.append(a7,m[6])
a8=np.append(k[7],l[7])
A1_8=np.append(a8,m[7])
a9=np.append(k[8],l[8])
A1_9=np.append(a9,m[8])
a10=np.append(k[9],l[9])
A1_10=np.append(a10,m[9])
a11=np.append(k[10],l[10])
A1_11=np.append(a11,m[10])
a12=np.append(k[11],l[11])
A1_12=np.append(a12,m[11])
a13=np.append(k[12],l[12])
A1_13=np.append(a13,m[12])
a14=np.append(k[13],l[13])
A1_14=np.append(a14,m[13])
a15=np.append(k[14],l[14])
A1_15=np.append(a15,m[14])
a16=np.append(k[15],l[15])
A1_16=np.append(a16,m[15])
a17=np.append(k[16],l[16])
A1_17=np.append(a17,m[16])
a18=np.append(k[17],l[17])
A1_18=np.append(a18,m[17])
a19=np.append(k[18],l[18])
A1_19=np.append(a19,m[18])
a20=np.append(k[19],l[19])
A1_20=np.append(a20,m[19])
A=np.array((A1_1,A1_2,A1_3,A1_4,A1_5,A1_6,A1_7,
            A1_8,A1_9,A1_10,A1_11,A1_12,A1_13,A1_14,
            A1_15,A1_16,A1_17,A1_18,A1_19,A1_20))
print(A)
#Multiplying with h[m,n]
p=np.concatenate((H[0],H[1]))
t=np.concatenate((p,H[2]))
Mult=A.dot(t)
y1=Mult[0:4]
y2=Mult[4:8]
y3=Mult[8:12]
y4=Mult[12:16]
y5=Mult[16:20]
Y=np.array((y1,y2,y3,y4,y5))
print("\nThe Convoluted Matrix y[m,n] is \n")
print(Y)